Todays Agenda:
   2:30 to 3:15 : Constructor
   3:15 to 4:15 : POM - Parallel Execution
   4:15 to 4:30 : Breakout
   4:30 to 4:45 : Break
   4:45 to 5:15 : POM - Excel Integration
   5:15 to 5:30 : POM - Cucumber
   5:30 to 6:30 : POM - ThreadLocal

Constructor:
============
    - It is a special method that is automatically invoked whenever an object is created
    - Purpose - To initialize the state of an object
    - Constructor name and Classname should be exactly the same
    - It doesnt have any return type
    
Types:
  1. Default Constructor
      - no arguments
  2. Parameterized Constructor 
      - multiple arguments   

  Constructor Overloading:
    It means that you can have mutiple constructors within a class, each can have
    unique parameters/arguments

 Can you call one Constructor from another Constructor?
    Yes, using this keyword it is possible which is called as Constructor Chaining
    Constructor call must be the first statement in a constructor
    Purpose:
       It avoids code duplication
       Reuse the code present in the called Constructor      

  this:
     - to differentiate between the local variable and the global variable  if they have the same name
     - It specifies that the variable being refererd is an global variabl/instance variable

Issue with static driver for parallel Execution:
===============================================
   In the base class the static driver is declared which means there will be a single instance shared across
   all testclasses. When you are executing in a parallel mode the concurrent test classes 
   interfere each other and they  try to use the shared driver simultaneously.

Resolution:
===========
   Remove static and create constructor in each classes for both Sequential as well as
   parallel execution.

Steps to do Parallel Execution:
=================================
  1. Remove static keyword in the base class 
  2. Create Parameterized Constructor in each of the classes
       public LoginPage(ChromeDriver driver) {
		  this.driver =driver;
	}
3. Assign the driver value with the instance variable
4. Pass driver value in each of the Constructor call.
5.Finally add parallel attribute in the xml file and execute the testcases parallely
POM-Excel Integration:
======================
  1. Create data folder inside the project and create excel sheets
      -Login
      -CreateLead
  2. Create another package called utils inside the project
      - Have Read Excel class inside 
  3. Create sendData()in the BaseClass and annotate with @DataProvider and call the ReadExcel
     class from the utils package.  
  4. At the method level replace all the hardcoded data by passing input argumnets
  5. At @Test method integrate using dataProvider attribute
  6. Pass input arguments to the Test method
  7. Create setValues() in the TestClass and annotate with @BeforeTest and set the excelfilename
  8. Declare the excelFileName globally in the BaseClass


For TestNG:
  - With Constructor configuration -> Both Sequential and Parallel Execution is possible
For Cucumber:
  - Cucumber will not support Constructor Configuration
For Hybrid FrameworK:
  - Support both TestNG as well as Cucumber
  - ThreadLocal Configuratio supports both TestNG and Cucumber without any conflict in accessing the driver
    
POM with Cucumber:
=====================

ThreadLocal Configuration:
=========================
  1. Create a ThreadLocal Variable as a private static final variable
     private static final ThreadLocal<ChromeDriver> cdriver= new ThreadLocal<ChromeDriver>();
  2. set():
       Sets the current thread's copy of this thread-local variableto the specified value
  3. get():
      the current thread's value of this thread-local  
   4. Create setDriver() and set the value
       public void setDriver() {
		cdriver.set(new ChromeDriver());
	}
  5. Create getDriver() and get the value
        public ChromeDriver getDriver() {
		//		ChromeDriver chromeDriver = cdriver.get();
		//		return chromeDriver;

		return cdriver.get();
	}
  6. Inside preCondition() 
      - call setDriver()
      - Replace the driver variable with getDriver() in all the classes.       

