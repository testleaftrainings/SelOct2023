Today's Agenda:
   2:30 to 3:30  : Cucumber Hooks
   3:30 to 3:45  : Breakout
   3:45 to 4:15  : Cucumber-tags
   4:15 to 4:30  : Breakout
   4:30 to 5:30  : PageObjectModel - Sequential Execution
   5:30 to 5:45  : Breakout
   5:45 to 6:30  : Constructor

Cucumber - Hooks:
=================
InvalidMethodException:
You're not allowed to extend classes that define Step Definitions or hooks
Hooks:
  Cucumber-> initially written in Ruby language
  Annotations->Hooks

  @Before
     - executes common precondition before each Scenario
  @After
    - executes common postCondition after each Scenario

Steps for HooksImplementation:
==============================
1. Create a BaseClass and declare driver as a global variable and make it as static
2. Create 2 classes inside steps package
    - LoginStepDefintion
       -Have methods till verify the error message
    - CreateLeadStepDefinition
       -Have methods implemented till verifying the viewLeadPage
3. All the StepDefinition classes should extend BaseClass  
4. Create a Class called HooksImplementation 
    - Create 2 methods preCondition and postCondition
      and annotate with @Before and @After hooks respectively
5. HooksImplementation class should extend BaseClass
Note:
  Remove Background steps in each feature file
  Remove the precondition methods from the LoginStepDefintion         

Steps to execute using TestNG Annotations(Alternate of hooks):
===========================================================
1. Inside the BaseClass have the driver declaration and the common preCondition and postCondition
   and annotate with @BeforeMethod and @AfterMetho respectively
2. All the StepDefintion classes should extend BaseClass
3. The runner class should extend BaseClass
4. BaseClass should extend AbstractTestNGCucumberTests  

Tags:
====
  -> To categorize the Scenarios

PageObjectModel:  

Leads Module(Leaftaps Application):
  - LoginPage
     enterUsername
     enterPassword
     clickLoginButton
  - WelcomePage
     clickCRMSFALink
  - MyHomePage
     clickLeadsLink
   -MyLeadsPage
      clickCreateLeadLink
      clickFindLeadsLink
      clickMergeLeadsLink
   - CreateLeadPage
      enterCompanyName
      enterFirstName
      enterLastName
      clickSubmitButton
   - ViewLeadsPage
       - verifyLeads
       - clickEdit
       - clickDelete
       - clickDuplicate  


Steps to implement PageObjectModel:
=======================================
  1. Inside src/main/java create  3 packages
              -base
                - Create a BaseClass for common preConditions and postConditions specific to the project
                  and annotate with @BeforeMethod and @AfterMethod
              -pages
                - Create 6 classes 
                - All the classes inside pages package should extend BaseClass
                - Create methods for each action inside each pages
                - Inside each method add returns statements
                - If an action stays in the same page add return this
                - If an action navigates to another page create an object for the navigating page and
                  return that object
              -testcases    
                - Create a class called RunLogin
                - Create a method runLoginTestcase and annotate with @Test for execution 
                - Inside this method create object for LoginPage and access all the method required.
